// plugin does this automatically
scala.scalaVersion = scalaVersion

import org.podval.tools.test.framework.*

dependencies {
  testImplementation scalaBackend.testFramework(JUnit4ScalaNative)
  testImplementation scalaBackend.testFramework(MUnit            )
  testImplementation scalaBackend.testFramework(ScalaCheck       )
  testImplementation scalaBackend.testFramework(ScalaTest        )
  testImplementation scalaBackend.testFramework(Specs2           )
  testImplementation scalaBackend.testFramework(UTest            )
  testImplementation scalaBackend.testFramework(ZioTest          )

  // dependencies plugin adds automatically
  if (scalaBackend.scala3) {
    implementation "org.scala-native:scala3lib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.scalaVersion}+0.5.8" // sets backend.backendVersion
  } else {
    implementation "org.scala-native:scalalib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.scalaVersion}+0.5.8" // sets backend.backendVersion
  }
  implementation "org.scala-native:nativelib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  implementation "org.scala-native:clib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  implementation "org.scala-native:posixlib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  implementation "org.scala-native:javalib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  implementation "org.scala-native:windowslib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  implementation "org.scala-native:auxlib_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"

  scalanative "org.scala-native:tools_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
  scalanative "org.scala-native:test-runner_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"

  scalaCompilerPlugins "org.scala-native:nscplugin_${scalaBackend.scalaVersion}:${scalaBackend.backendVersion}"

  if (scalaBackend.nonJvmJUnit4present) {
    testScalaCompilerPlugins "org.scala-native:junit-plugin_${scalaBackend.scalaVersion}:${scalaBackend.backendVersion}"
  }

  testRuntimeOnly "org.scala-native:test-interface_native0.5_${scalaBackend.scalaBinaryVersion}:${scalaBackend.backendVersion}"
}

link {
  mainClass = 'example.Main'
}
