// plugin does this automatically
scala.scalaVersion = scalaVersion

import org.podval.tools.test.framework.*

dependencies {
  testImplementation scalaBackend.testFramework(JUnit4ScalaNative)
  testImplementation scalaBackend.testFramework(MUnit            )
  testImplementation scalaBackend.testFramework(ScalaCheck       )
  testImplementation scalaBackend.testFramework(ScalaTest        )
  testImplementation scalaBackend.testFramework(Specs2           )
  testImplementation scalaBackend.testFramework(UTest            )
  testImplementation scalaBackend.testFramework(ZioTest          )

  // dependencies plugin adds automatically
  if (scalaBackend.scala3) {
    implementation           scalaBackend.scala3Dependency     ('org.scala-native', 'scala3lib'     , "${scalaBackend.scalaVersion}+0.5.8") // sets scalaBackend.backendVersion
  } else {
    implementation           scalaBackend.scala2Dependency     ('org.scala-native', 'scalalib'      , "${scalaBackend.scalaVersion}+0.5.8") // sets scalaBackend.backendVersion
  }
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'nativelib'     , scalaBackend.backendVersion)
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'clib'          , scalaBackend.backendVersion)
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'posixlib'      , scalaBackend.backendVersion)
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'javalib'       , scalaBackend.backendVersion)
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'windowslib'    , scalaBackend.backendVersion)
  implementation             scalaBackend.scalaDependency      ('org.scala-native', 'auxlib'        , scalaBackend.backendVersion)

  scalanative                scalaBackend.pluginScalaDependency('org.scala-native', 'tools'         , scalaBackend.backendVersion)
  scalanative                scalaBackend.pluginScalaDependency('org.scala-native', 'test-runner'   , scalaBackend.backendVersion)

  scalaCompilerPlugins       scalaBackend.scalaCompilerPlugin  ('org.scala-native', 'nscplugin'     , scalaBackend.backendVersion)

  if (scalaBackend.nonJvmJUnit4present) {
    testScalaCompilerPlugins scalaBackend.scalaCompilerPlugin  ('org.scala-native', 'junit-plugin'  , scalaBackend.backendVersion)
  }

  testRuntimeOnly            scalaBackend.scalaDependency      ('org.scala-native', 'test-interface', scalaBackend.backendVersion)
}

link {
  mainClass = 'example.Main'
}
